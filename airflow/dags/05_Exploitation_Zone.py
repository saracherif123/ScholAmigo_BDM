from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
import os
import psycopg2

# Base path inside Airflow container
BASE_DIR = "/opt/airflow"
SCRIPTS_DIR = os.path.join(BASE_DIR, "exploitation_zone", "formatters")
SQL_SCHEMA_PATH = os.path.join(BASE_DIR, "exploitation_zone", "scripts", "Scholarships.sql")

# PostgreSQL config
POSTGRES_CONFIG = {
    "host": "localhost",
    "database": "ScholAmigo",
    "user": "marwasulaiman", #change to your username
    # "password": "your-password", 
    "port": 5432
}

default_args = {
    "owner": "airflow",
    "retries": 1,
    "retry_delay": timedelta(minutes=2),
    "start_date": datetime(2025, 6, 8),
}

dag = DAG(
    "exploitation_zone_pipeline",
    default_args=default_args,
    description="Runs exploitation zone setup and formatters for Postgres and Graph DB",
    schedule_interval="@once",
    catchup=False,
)

# --- SQL execution for schema creation
def execute_sql_script():
    with open(SQL_SCHEMA_PATH, "r") as file:
        sql = file.read()
    conn = psycopg2.connect(**POSTGRES_CONFIG)
    cur = conn.cursor()
    cur.execute(sql)
    conn.commit()
    cur.close()
    conn.close()

# --- Generic Python runner
def run_script(script_path):
    def _run():
        os.system(f"python3 {script_path}")
    return _run

# Tasks
create_schema_task = PythonOperator(
    task_id="create_postgres_schema",
    python_callable=execute_sql_script,
    dag=dag,
)

formatter_00 = PythonOperator(
    task_id="formatter_00_scholarships",
    python_callable=run_script(os.path.join(SCRIPTS_DIR, "00_Scholarships_formatter.py")),
    dag=dag,
)

formatter_01 = PythonOperator(
    task_id="formatter_01_aggregator",
    python_callable=run_script(os.path.join(SCRIPTS_DIR, "01_Aggregator_formatter.py")),
    dag=dag,
)

formatter_02 = PythonOperator(
    task_id="formatter_02_graph_creation",
    python_callable=run_script(os.path.join(SCRIPTS_DIR, "02_student_alumni_graph_creation.py")),
    dag=dag,
)

formatter_03 = PythonOperator(
    task_id="formatter_03_graph_cypher",
    python_callable=run_script(os.path.join(SCRIPTS_DIR, "03_graph_cypher_queries.py")),
    dag=dag,
)

# --- Dependencies

# PostgreSQL branch
create_schema_task >> formatter_00 >> formatter_01

# Graph branch
formatter_02 >> formatter_03
