import os
import json
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def get_db_connection():
    """Create a connection to the PostgreSQL database"""
    try:
        conn = psycopg2.connect(
            host=os.getenv("DB_HOST"),
            database=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD")
        )
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        raise e

def export_scholarships():
    """Export scholarships data to JSON file"""
    try:
        # Connect to database
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        # Query to get all scholarship information
        query = """
        SELECT 
            sc.key,
            sc.funding,
            sc.level,
            sc.required_level,
            sc.intake,
            sc.status,
            se.name,
            se.url,
            se.description,
            se.duration,
            se.scholarship_available_for_current_intake,
            se.required_documents,
            se.course_topics,
            se.requirements,
            se.programme_tuition_cov,
            se.programme_monthly_allowance,
            se.programme_installation_costs,
            se.partner_tuition_cov,
            se.partner_monthly_allowance,
            se.partner_installation_costs,
            COALESCE(array_agg(DISTINCT c.name) FILTER (WHERE c.name IS NOT NULL), ARRAY[]::text[]) as countries,
            COALESCE(array_agg(DISTINCT f.field) FILTER (WHERE f.field IS NOT NULL), ARRAY[]::text[]) as fields_of_study,
            COALESCE(array_agg(DISTINCT u.university) FILTER (WHERE u.university IS NOT NULL), ARRAY[]::text[]) as universities,
            COALESCE(array_agg(DISTINCT d.date::text) FILTER (WHERE d.date IS NOT NULL), ARRAY[]::text[]) as deadlines
        FROM scholarships_common sc
        LEFT JOIN scholarships_erasmus se ON sc.key = se.key
        LEFT JOIN origin_countries_sch ocs ON sc.key = ocs.sch_key
        LEFT JOIN countries c ON ocs.country_key = c.key
        LEFT JOIN scholarships_fields sf ON sc.key = sf.sch_key
        LEFT JOIN fields_of_study f ON sf.field_key = f.key
        LEFT JOIN sch_uni su ON sc.key = su.sch_key
        LEFT JOIN universities u ON su.uni_key = u.key
        LEFT JOIN deadlines d ON sc.key = d.sch_key
        GROUP BY sc.key, se.key, se.name, se.url, se.description, se.duration, 
                 se.scholarship_available_for_current_intake, se.required_documents,
                 se.course_topics, se.requirements, se.programme_tuition_cov,
                 se.programme_monthly_allowance, se.programme_installation_costs,
                 se.partner_tuition_cov, se.partner_monthly_allowance, se.partner_installation_costs
        """
        
        # Execute query
        cur.execute(query)
        scholarships = cur.fetchall()
        
        # Convert to list of dictionaries
        scholarships_list = []
        for sch in scholarships:
            scholarship = dict(sch)
            # Convert any None values to empty strings or lists
            for key, value in scholarship.items():
                if value is None:
                    if isinstance(scholarship[key], list):
                        scholarship[key] = []
                    else:
                        scholarship[key] = ""
            scholarships_list.append(scholarship)
        
        # Create data directory if it doesn't exist
        os.makedirs("../data", exist_ok=True)
        
        # Save to JSON file
        with open("../data/scholarships.json", "w") as f:
            json.dump(scholarships_list, f, indent=2)
        
        print(f"Successfully exported {len(scholarships_list)} scholarships to JSON")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"Error exporting scholarships: {e}")

if __name__ == "__main__":
    export_scholarships() 