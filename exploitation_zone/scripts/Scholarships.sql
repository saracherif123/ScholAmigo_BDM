-- PostgreSQL Schema for Erasmus Scholarships Database

-- Drop tables if they exist (in reverse order of dependencies)
DROP TABLE IF EXISTS sch_uni CASCADE;
DROP TABLE IF EXISTS deadlines CASCADE;
DROP TABLE IF EXISTS important_dates CASCADE;
DROP TABLE IF EXISTS scholarships_erasmus CASCADE;
DROP TABLE IF EXISTS program_countries_sch CASCADE;
DROP TABLE IF EXISTS origin_countries_sch CASCADE;
DROP TABLE IF EXISTS scholarships_fields CASCADE;
DROP TABLE IF EXISTS universities CASCADE;
DROP TABLE IF EXISTS scholarships_common CASCADE;
DROP TABLE IF EXISTS fields_of_study CASCADE;
DROP TABLE IF EXISTS countries CASCADE;

-- Countries table
CREATE TABLE countries (
    key SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

-- Fields of study table
CREATE TABLE fields_of_study (
    key INTEGER PRIMARY KEY,
    field VARCHAR(255) NOT NULL
);

-- Scholarships common table
CREATE TABLE scholarships_common (
    key SERIAL PRIMARY KEY,
    funding VARCHAR(20) NOT NULL CHECK (funding IN ('Partial', 'Full', 'Unknown')),
    level VARCHAR(20) NOT NULL CHECK (level IN ('Bachelor', 'Master', 'PhD', 'PostDoc', 'Faculty')),
    required_level VARCHAR(20) NOT NULL CHECK (required_level IN ('High School', 'Bachelor', 'Master', 'PhD', 'PostDoc', 'Faculty')),
    intake VARCHAR(20) CHECK (intake IN ('Fall', 'Spring')),
    status VARCHAR(20) CHECK (status IN ('Open', 'Closed'))
);

-- Universities table
CREATE TABLE universities (
    key SERIAL PRIMARY KEY,
    university VARCHAR(255) NOT NULL,
    country_key INTEGER NOT NULL,
    FOREIGN KEY (country_key) REFERENCES countries(key)
);

-- Scholarships fields junction table
CREATE TABLE scholarships_fields (
    sch_key INTEGER NOT NULL,
    field_key INTEGER NOT NULL,
    PRIMARY KEY (sch_key, field_key),
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key),
    FOREIGN KEY (field_key) REFERENCES fields_of_study(key)
);

-- Origin countries scholarships junction table
CREATE TABLE origin_countries_sch (
    sch_key INTEGER NOT NULL,
    country_key INTEGER NOT NULL,
    PRIMARY KEY (sch_key, country_key),
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key),
    FOREIGN KEY (country_key) REFERENCES countries(key)
);

-- Program countries scholarships junction table
CREATE TABLE program_countries_sch (
    sch_key INTEGER NOT NULL,
    country_key INTEGER NOT NULL,
    PRIMARY KEY (sch_key, country_key),
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key),
    FOREIGN KEY (country_key) REFERENCES countries(key)
);

-- Scholarships erasmus detailed table
CREATE TABLE scholarships_erasmus (
    key INTEGER PRIMARY KEY,
    name VARCHAR(500),
	url VARCHAR(500),
    description TEXT,
    duration FLOAT,
    scholarship_available_for_current_intake BOOLEAN,
    required_documents TEXT,
    course_topics TEXT,
    courses_details_link VARCHAR(500),
    deadlines_more_details_link VARCHAR(500),
	scholarship_more_details_link VARCHAR(500),
    other_scholarships TEXT,
    requirements_more_details_link VARCHAR(500),
	mobility_link VARCHAR(500),
    requirements TEXT,
    others TEXT,
    programme_tuition_cov VARCHAR(200),
    programme_tuition_details VARCHAR(200),
    programme_monthly_allowance VARCHAR(200),
    programme_installation_costs VARCHAR(200),
    partner_tuition_cov VARCHAR(200),
    partner_tuition_details VARCHAR(200),
    partner_monthly_allowance VARCHAR(200),
    partner_installation_costs VARCHAR(200),
    FOREIGN KEY (key) REFERENCES scholarships_common(key)
);

-- Important dates table
CREATE TABLE important_dates (
    sch_key INTEGER NOT NULL,
    date DATE,
    description VARCHAR(255),
    comments TEXT,
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key)
);

-- Deadlines table
CREATE TABLE deadlines (
    sch_key INTEGER NOT NULL,
    date DATE,
    description VARCHAR(255),
    comments TEXT,
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key)
);

-- Scholarship universities junction table
CREATE TABLE sch_uni (
    sch_key INTEGER NOT NULL,
    uni_key INTEGER NOT NULL,
    PRIMARY KEY (sch_key, uni_key),
    FOREIGN KEY (sch_key) REFERENCES scholarships_common(key),
    FOREIGN KEY (uni_key) REFERENCES universities(key)
);

-- -- Insert static data for fields of study
-- INSERT INTO fields_of_study (key, field) VALUES
-- (0, 'Generic programmes and qualifications'),
-- (1, 'Education'),
-- (2, 'Arts and humanities'),
-- (3, 'Social sciences, journalism and information'),
-- (4, 'Business, administration and law'),
-- (5, 'Natural sciences, mathematics and statistics'),
-- (6, 'Information and Communication Technologies'),
-- (7, 'Engineering, manufacturing and construction'),
-- (8, 'Agriculture, forestry, fisheries and veterinary'),
-- (9, 'Health and welfare'),
-- (10, 'Services');

-- Create indexes for better performance
CREATE INDEX idx_scholarships_fields_sch_key ON scholarships_fields(sch_key);
CREATE INDEX idx_scholarships_fields_field_key ON scholarships_fields(field_key);
CREATE INDEX idx_origin_countries_sch_sch_key ON origin_countries_sch(sch_key);
CREATE INDEX idx_origin_countries_sch_country_key ON origin_countries_sch(country_key);
CREATE INDEX idx_program_countries_sch_sch_key ON program_countries_sch(sch_key);
CREATE INDEX idx_program_countries_sch_country_key ON program_countries_sch(country_key);
CREATE INDEX idx_universities_country_key ON universities(country_key);
CREATE INDEX idx_important_dates_sch_key ON important_dates(sch_key);
CREATE INDEX idx_deadlines_sch_key ON deadlines(sch_key);
CREATE INDEX idx_sch_uni_sch_key ON sch_uni(sch_key);
CREATE INDEX idx_sch_uni_uni_key ON sch_uni(uni_key);